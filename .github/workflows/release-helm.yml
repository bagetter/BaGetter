name: Publish Helm Chart to helm-chart-repo

on:
  push:
    branches: [ "main" ]
    # Only run when chart content changes
    paths:
      - "charts/**"
  workflow_dispatch:

permissions:
  contents: read

concurrency:
  group: release-helm
  cancel-in-progress: false

env:
  CHART_NAME: bagetter
  CHART_DIR: charts/bagetter
  CHART_REPO_OWNER: bagetter
  CHART_REPO_NAME: helm-chart-repo
  PAGES_URL: https://bagetter.github.io/helm-chart-repo
  GIT_USER_NAME: github-actions[bot]
  GIT_USER_EMAIL: 41898282+github-actions[bot]@users.noreply.github.com

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout BaGetter
        uses: actions/checkout@v4

      - name: Verify chart directory exists
        run: |
          if [ ! -f "${CHART_DIR}/Chart.yaml" ]; then
            echo "Chart.yaml not found at ${CHART_DIR}. Please update CHART_DIR or add the chart."
            exit 1
          fi

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.15.2

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Helm lint
        run: helm lint "${CHART_DIR}"

      - name: Build chart dependencies (if any)
        run: helm dependency build "${CHART_DIR}"

      - name: Get chart version
        id: chart_meta
        shell: bash
        run: |
          VERSION="$(grep -E '^version:' "${CHART_DIR}/Chart.yaml" | awk '{print $2}')"
          NAME="$(grep -E '^name:' "${CHART_DIR}/Chart.yaml" | awk '{print $2}')"
          if [ -z "$VERSION" ] || [ -z "$NAME" ]; then
            echo "Failed to parse name or version from Chart.yaml"
            exit 1
          fi
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "name=$NAME" >> "$GITHUB_OUTPUT"

      - name: Package chart
        run: |
          mkdir -p dist
          helm package "${CHART_DIR}" --destination dist
          ls -l dist

      - name: Clone helm-chart-repo gh-pages
        env:
          TOKEN: ${{ secrets.CHARTS_PUBLISH_TOKEN }}
        run: |
          set -euo pipefail
          git config --global user.name "${GIT_USER_NAME}"
          git config --global user.email "${GIT_USER_EMAIL}"
          if git ls-remote --exit-code https://github.com/${CHART_REPO_OWNER}/${CHART_REPO_NAME}.git gh-pages >/dev/null 2>&1; then
            git clone --depth 1 --branch gh-pages "https://x-access-token:${TOKEN}@github.com/${CHART_REPO_OWNER}/${CHART_REPO_NAME}.git" repo
          else
            # Create gh-pages if missing
            git clone --depth 1 "https://x-access-token:${TOKEN}@github.com/${CHART_REPO_OWNER}/${CHART_REPO_NAME}.git" repo
            cd repo
            git checkout --orphan gh-pages
            rm -rf .
            touch .nojekyll
            echo "" > index.yaml
            git add .nojekyll index.yaml
            git commit -m "Initialize gh-pages"
            git push -u origin gh-pages
            cd ..
          fi

      - name: Build chart documentation
        run: |
          set -euo pipefail
          DOCS_DIR="repo/docs"
          SRC_DOCS_DIR="${CHART_DIR}/docs"
          mkdir -p "${DOCS_DIR}"

          npx -y marked "${CHART_DIR}/README.md" --gfm --output "${DOCS_DIR}/index.html" --title "BaGetter Helm Chart"
          cp "${CHART_DIR}/README.md" "${DOCS_DIR}/README.md"
          cp "${CHART_DIR}/values.yaml" "${DOCS_DIR}/values.yaml"
          if [ -f "${CHART_DIR}/values.schema.json" ]; then
            cp "${CHART_DIR}/values.schema.json" "${DOCS_DIR}/values.schema.json"
          fi

          if [ -d "${SRC_DOCS_DIR}" ]; then
            while IFS= read -r -d '' file; do
              rel="${file#"${SRC_DOCS_DIR}/"}"
              dest_dir="${DOCS_DIR}/$(dirname "${rel}")"
              mkdir -p "${dest_dir}"
              cp "${file}" "${dest_dir}/$(basename "${rel}")"

              html_target="${DOCS_DIR}/${rel%.md}.html"
              mkdir -p "$(dirname "${html_target}")"
              title_name="$(basename "${rel%.md}")"
              title_name="${title_name//-/ }"
              title_name="${title_name//_/ }"
              npx -y marked "${file}" --gfm --output "${html_target}" --title "BaGetter Helm Chart - ${title_name}"
            done < <(find "${SRC_DOCS_DIR}" -type f -name "*.md" -print0 | sort -z)
          fi

          cat <<EOF > repo/index.html
          <!doctype html>
          <html lang="en">
          <head>
            <meta charset="utf-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <title>BaGetter Helm Chart</title>
            <style>
              body { font-family: system-ui, -apple-system, BlinkMacSystemFont, "Segoe UI", sans-serif; margin: 2rem auto; max-width: 800px; line-height: 1.6; padding: 0 1.5rem; }
              h1 { font-size: 2.25rem; margin-bottom: 0.25rem; }
              section { margin-top: 2rem; }
              a.button { display: inline-block; margin-top: 0.75rem; padding: 0.65rem 1.1rem; border-radius: 0.5rem; background: #2563eb; color: #fff; text-decoration: none; font-weight: 600; }
              a.button.secondary { background: #64748b; }
              ul { padding-left: 1.2rem; }
            </style>
          </head>
          <body>
            <header>
              <h1>BaGetter Helm Chart</h1>
              <p>Browse the documentation, configuration reference, and published chart packages for BaGetter deployments.</p>
            </header>
            <section>
              <h2>Documentation</h2>
              <ul>
                <li><a href="docs/index.html">Chart Overview</a></li>
                <li><a href="docs/overview.html">Configuration Overview</a></li>
                <li><a href="docs/storage.html">Storage Providers</a></li>
                <li><a href="docs/database.html">Database Providers</a></li>
                <li><a href="docs/configuration.html">Advanced Configuration</a></li>
                <li><a href="docs/testing.html">Testing Guidance</a></li>
                <li><a href="docs/upgrading.html">Upgrade Notes</a></li>
                <li><a href="docs/values.yaml">Default Values (YAML)</a></li>
                <li><a href="docs/values.schema.json">Values JSON Schema</a></li>
                <li><a href="docs/README.md">Source README (Markdown)</a></li>
              </ul>
              <a class="button" href="${PAGES_URL}/docs/index.html">Open Documentation</a>
            </section>
            <section>
              <h2>Helm Repository</h2>
              <p>Add the Helm repository with:</p>
              <pre><code>helm repo add bagetter ${PAGES_URL}</code></pre>
              <a class="button secondary" href="index.yaml">View index.yaml</a>
            </section>
          </body>
          </html>
          EOF

      - name: Copy package and update index
        run: |
          set -euo pipefail
          cd repo
          mkdir -p ./
          cp -v ../dist/${{ steps.chart_meta.outputs.name }}-${{ steps.chart_meta.outputs.version }}.tgz ./ || true

          # Ensure .nojekyll
          touch .nojekyll

          # Merge/Update index.yaml
          if [ -f index.yaml ] && [ -s index.yaml ]; then
            helm repo index . --url "${PAGES_URL}" --merge index.yaml
          else
            helm repo index . --url "${PAGES_URL}"
          fi

          # Avoid re-adding the same version if it already exists
          # (If the .tgz already existed, helm repo index --merge will keep one entry)

          git add .nojekyll index.yaml *.tgz docs index.html || true
          if ! git diff --cached --quiet; then
            git commit -m "Publish ${{ steps.chart_meta.outputs.name }}-${{ steps.chart_meta.outputs.version }}"
            git push origin gh-pages
          else
            echo "No changes to commit (version may already be published)."
          fi
      - name: Summary
        run: |
          echo "Published chart:"
          echo "  Name:     ${{ steps.chart_meta.outputs.name }}"
          echo "  Version:  ${{ steps.chart_meta.outputs.version }}"
          echo "Repository URL: ${PAGES_URL}"

